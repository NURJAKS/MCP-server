#!/usr/bin/env node

// ะัะพััะพะน ัะตัั ะดะปั ะฟัะพะฒะตัะบะธ ัะฐะฑะพัั MCP ัะตัะฒะตัะฐ
const { spawn } = require('child_process');

console.log('๐งช ะขะตััะธัะพะฒะฐะฝะธะต NIA MCP Server...\n');

// ะะฐะฟััะบะฐะตะผ MCP ัะตัะฒะตั
const mcpServer = spawn('node', ['./bin/cli.mjs', '--stdio'], {
    stdio: ['pipe', 'pipe', 'pipe']
});

// ะขะตััะพะฒัะต ะดะฐะฝะฝัะต ะดะปั ะฟัะพะฒะตัะบะธ ะธะฝััััะผะตะฝัะพะฒ
const testTools = [
    {
        name: 'index_repository',
        description: 'ะะฝะดะตะบัะฐัะธั GitHub ัะตะฟะพะทะธัะพัะธั',
        params: {
            repo_url: 'https://github.com/owner/test-repo',
            branch: 'main'
        }
    },
    {
        name: 'list_repositories',
        description: 'ะกะฟะธัะพะบ ัะตะฟะพะทะธัะพัะธะตะฒ',
        params: {}
    },
    {
        name: 'search_codebase',
        description: 'ะะพะธัะบ ะฟะพ ะบะพะดั',
        params: {
            query: 'authentication function',
            include_sources: true
        }
    },
    {
        name: 'nia_web_search',
        description: 'ะะตะฑ-ะฟะพะธัะบ',
        params: {
            query: 'RAG libraries',
            num_results: 3
        }
    },
    {
        name: 'getWeather',
        description: 'ะะฝัะพัะผะฐัะธั ะพ ะฟะพะณะพะดะต',
        params: {
            city: 'Moscow',
            units: 'celsius'
        }
    }
];

console.log('๐ ะะพัััะฟะฝัะต ะธะฝััััะผะตะฝัั ะดะปั ัะตััะธัะพะฒะฐะฝะธั:');
testTools.forEach((tool, index) => {
    console.log(`${index + 1}. ${tool.name} - ${tool.description}`);
});

console.log('\nโ MCP ัะตัะฒะตั ะณะพัะพะฒ ะบ ัะตััะธัะพะฒะฐะฝะธั!');
console.log('๐ก ะัะฟะพะปัะทัะนัะต ััะธ ะธะฝััััะผะตะฝัั ะฒ Cursor ะธะปะธ ะดััะณะพะผ MCP ะบะปะธะตะฝัะต:');
console.log('   - index_repository');
console.log('   - list_repositories');
console.log('   - search_codebase');
console.log('   - nia_web_search');
console.log('   - nia_deep_research_agent');
console.log('   - initialize_project');
console.log('   - ะธ ะดััะณะธะต...\n');

// ะะฑัะฐะฑะพัะบะฐ ะฒัะฒะพะดะฐ ัะตัะฒะตัะฐ
mcpServer.stdout.on('data', (data) => {
    console.log('๐ก MCP Server:', data.toString());
});

mcpServer.stderr.on('data', (data) => {
    console.log('โ MCP Server Error:', data.toString());
});

mcpServer.on('close', (code) => {
    console.log(`\n๐ MCP Server ะทะฐะบััั ั ะบะพะดะพะผ: ${code}`);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\n๐ ะััะฐะฝะพะฒะบะฐ ัะตััะธัะพะฒะฐะฝะธั...');
    mcpServer.kill();
    process.exit(0);
}); 